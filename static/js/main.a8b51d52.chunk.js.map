{"version":3,"sources":["components/services/image-api.js","components/ImageErrorView/ImageErrorView.js","components/Loader/Loader.js","components/ImageGalleryItem/ImageGalleryItem.js","components/ImageGallery/ImageGallery.js","components/Modal/Modal.js","components/Button/Button.js","components/Searchbar/Searchbar.js","components/ImageInfo/ImageInfo.js","App.js","index.js"],"names":["KEY","searchName","page","a","fetch","response","ok","json","Promise","reject","Error","fetchImage","ImageErrorView","message","role","ImageLoader","type","color","height","width","Component","ImageGalleryItem","image","toggleModal","className","src","webformatURL","alt","tags","onClick","status","largeImageURL","ImageGallery","images","map","id","modalRoot","document","querySelector","Modal","handleKeyDown","event","key","target","currentTarget","props","window","addEventListener","this","removeEventListener","createPortal","Button","Searchbar","state","imageName","changeInput","evt","setState","value","handleSubmit","preventDefault","trim","onSubmit","toast","onChange","autoComplete","autoFocus","placeholder","ImageInfo","totalHits","searchQuery","isLoading","error","notify","showModal","activeButton","targetImage","onClickLoadMore","prevState","checkLoadMore","length","searchImages","prevProps","then","newImage","hits","scrollTo","top","documentElement","scrollHeight","behavior","catch","finally","App","handleFormSubmit","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a8b51d52.chunk.js","sourcesContent":["const KEY = '19027905-98233d65311b3fd13bc0a1406';\r\nasync function fetchImage(searchName, page) {\r\n    const response = await fetch(`https://pixabay.com/api/?q=${searchName}&page=${page}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`);\r\n    if (response.ok) {\r\n        return response.json();\r\n    }\r\n    return await Promise.reject(new Error(`No images`));\r\n}\r\n\r\nexport default fetchImage ;\r\n\r\n","import PropTypes from 'prop-types';\r\n\r\nfunction ImageErrorView({ message }) {\r\n  return (\r\n    <div role=\"alert\">\r\n      <p>Something went wrong. Error: {message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nImageErrorView.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ImageErrorView;","import React, { Component } from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nclass ImageLoader extends Component {\r\n  render() {\r\n    return (\r\n      <Loader type=\"Bars\" color=\"#00BFFF\" height={80} width={80} />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageLoader;","import React from 'react';\r\n\r\nconst ImageGalleryItem = ({ image, toggleModal }) => {\r\n\r\n    const onClick = () => {\r\n        toggleModal({\r\n            status: true,\r\n            src: image.largeImageURL,\r\n            alt: image.tags,\r\n        });\r\n    };\r\n        \r\n    return (\r\n        <li className=\"ImageGalleryItem\">\r\n            <img\r\n                src={image.webformatURL}\r\n                alt={image.tags}\r\n                className=\"ImageGalleryItem-image\"\r\n                onClick={onClick}\r\n            />\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default ImageGalleryItem;","import React from 'react';\r\nimport ImageGalleryItem from '../ImageGalleryItem';\r\n\r\nconst ImageGallery = ({ images, toggleModal }) => {\r\n  return (\r\n    <ul className=\"ImageGallery\">\r\n      {images.map(image => (\r\n        <ImageGalleryItem\r\n          image={image}\r\n          key={image.id}\r\n          toggleModal={toggleModal}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ImageGallery;","import React, { Component } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nclass Modal extends Component {\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('keydown', this.handleKeyDown);\r\n    };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('keydown', this.handleKeyDown);\r\n    };\r\n\r\n    handleKeyDown = event => {\r\n        if (event.key === 'Escape' || event.target === event.currentTarget) {\r\n            this.props.toggleModal({status: false});\r\n        }\r\n    };\r\n\r\n    render() {\r\n      \r\n        const { src, alt } = this.props;\r\n\r\n        return createPortal(\r\n            <div className=\"Overlay\" onClick={this.handleKeyDown}>\r\n                <div className=\"Modal\">\r\n                    <img src={src} alt={alt} />\r\n                </div>\r\n            </div>,\r\n            modalRoot,\r\n        );\r\n    };\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\n\r\n\r\nconst Button = ({ onClick }) => {\r\n        return (\r\n            <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n                Load More\r\n            </button>\r\n        );\r\n};\r\n\r\nexport default Button;","import { Component } from 'react';\r\nimport { ImSearch } from 'react-icons/im';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Searchbar extends Component {\r\n    state = {\r\n        imageName: '',\r\n    };\r\n\r\n    changeInput = evt => {\r\n        this.setState({ imageName: evt.target.value });\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.imageName.trim() === '') {\r\n            toast('Enter the word');\r\n            return;\r\n        }\r\n\r\n        this.props.onSubmit(this.state.imageName);\r\n        this.setState({ imageName: '' });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"Searchbar\">\r\n                <form className=\"SearchForm\" onSubmit={this.handleSubmit}>\r\n                    <button type=\"submit\" className=\"SearchForm-button\">\r\n                        <ImSearch />\r\n                    </button>\r\n                    <input\r\n                        value={this.state.imageName}\r\n                        onChange={this.changeInput}\r\n                        className=\"SearchForm-input\"\r\n                        type=\"text\"\r\n                        autoComplete=\"off\"\r\n                        autoFocus\r\n                        placeholder=\"Search images and photos\"\r\n                    />\r\n                    \r\n                </form>\r\n            </header>\r\n        );\r\n    };\r\n}\r\n\r\nSearchbar.propTypes = {\r\n    onSubmit: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Searchbar;","import React, { Component } from 'react';\r\nimport fetchImage from '../services/image-api';\r\nimport ImagesErrorView from '../ImageErrorView';\r\nimport ImageLoader from '../Loader';\r\nimport ImageGallery from '../ImageGallery';\r\nimport Modal from '../Modal';\r\nimport Button from '../Button';\r\nimport Searchbar from '../Searchbar';\r\n\r\nclass ImageInfo extends Component {\r\n  state = {\r\n    images: [],\r\n    totalHits: 0,\r\n    searchQuery: '',\r\n    page: 1,\r\n    isLoading: false,\r\n    error: null,\r\n    notify: false,\r\n    message: '',\r\n    showModal: false,\r\n    activeButton: false,\r\n    targetImage: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.searchImages();\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { searchQuery, page } = this.state;\r\n\r\n    if (prevState.searchQuery !== searchQuery) {\r\n      this.searchImages(searchQuery, 1);\r\n      this.setState({ page: 1 });\r\n    }\r\n    if (prevState.page !== page) {\r\n      this.searchImages(searchQuery, page);\r\n    }\r\n  };\r\n   searchImages(searchQuery = '', page = 1) {\r\n    if (searchQuery !== '') {\r\n      this.setState({\r\n        isLoading: true,\r\n        notify: false,\r\n      });\r\n\r\n      fetchImage(searchQuery, page)\r\n        .then(newImage => {\r\n          if (page === 1) {\r\n            this.setState({\r\n              totalHits: newImage.totalHits,\r\n              images: newImage.hits,\r\n            });\r\n          } else {\r\n            this.setState(prevState => ({\r\n              images: [...prevState.images, ...newImage.hits],\r\n            }));\r\n            window.scrollTo({\r\n              top: document.documentElement.scrollHeight,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n          this.checkLoadMore();\r\n        })\r\n        .catch(error => this.setState({ error }))\r\n        .finally(() => this.setState({ isLoading: false }));\r\n    } else {\r\n      this.setState({\r\n        images: [],\r\n        activeButton: false,\r\n        message: 'Please input search request',\r\n        notify: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  onSubmit = value => {\r\n    this.setState({ searchQuery: value });\r\n  };\r\n\r\n  onClickLoadMore = () => {\r\n    this.setState(prevState => ({\r\n      page: prevState.page + 1,\r\n    }));\r\n  };\r\n\r\n  checkLoadMore = () => {\r\n    const { totalHits, images } = this.state;\r\n\r\n    if (totalHits > images.length) {\r\n      this.setState({ activeButton: true });\r\n    } else {\r\n      this.setState({ activeButton: false });\r\n    }\r\n\r\n    if (!totalHits) {\r\n      this.setState({\r\n        message: 'Nothing was found. Try again.',\r\n        notify: true,\r\n      });\r\n    } else {\r\n      this.setState({ notify: false });\r\n    }\r\n  };\r\n\r\n  toggleModal = ({ status, src, alt }) => {\r\n    if (status) {\r\n      this.setState({\r\n        targetImage: { src, alt },\r\n        showModal: true,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        targetImage: null,\r\n        showModal: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      images,\r\n      isLoading,\r\n      error,\r\n      notify,\r\n      message,\r\n      showModal,\r\n      targetImage,\r\n      activeButton,\r\n    } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Searchbar onSubmit={this.onSubmit} />\r\n        {error && <ImagesErrorView message={error.message} />}\r\n        {isLoading && (\r\n          <ImageLoader />\r\n        )}\r\n        {images.length > 0 && (\r\n          <ImageGallery images={images} toggleModal={this.toggleModal} />\r\n        )}\r\n        {notify && <ImagesErrorView message={message} />}\r\n        {showModal && (\r\n          <Modal\r\n            src={targetImage.src}\r\n            alt={targetImage.alt}\r\n            toggleModal={this.toggleModal}\r\n          />\r\n        )}\r\n        {activeButton && <Button onClick={this.onClickLoadMore} />}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageInfo;\r\n","import { Component } from 'react';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport ImageInfo from './components/ImageInfo';\r\n\r\nexport default class App extends Component {\r\n    state = {\r\n        imageName: '',\r\n    };\r\n\r\n    handleFormSubmit = imageName => {\r\n        this.setState({ imageName });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <ImageInfo imageName={this.state.imageName} />\r\n                <ToastContainer autoClose={2000} />\r\n            </>\r\n        );\r\n    };\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// const elem1 = <span>Привет</span>;\n// const elem2 = <span>мир</span>;\n\n// const element = (\n//   <div>\n//     {elem1}\n//     {elem2}\n//   </div>\n// );\n// console.log(element);\n\n// ReactDOM.render(element, document.querySelector(\"#root\"));\n"],"sourceRoot":""}